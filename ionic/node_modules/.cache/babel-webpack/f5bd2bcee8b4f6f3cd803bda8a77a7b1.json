{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵisMessagingSupportedFactory, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { deleteToken as deleteToken$1, getMessaging as getMessaging$1, getToken as getToken$1, onMessage as onMessage$1 } from 'firebase/messaging';\nexport * from 'firebase/messaging';\n\nclass Messaging {\n  constructor(messaging) {\n    return messaging;\n  }\n\n}\n\nconst MESSAGING_PROVIDER_NAME = 'messaging';\n\nclass MessagingInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(MESSAGING_PROVIDER_NAME);\n  }\n\n}\n\nconst messagingInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(MESSAGING_PROVIDER_NAME))), distinct());\nconst PROVIDED_MESSAGING_INSTANCES = new InjectionToken('angularfire2.messaging-instances');\n\nfunction defaultMessagingInstanceFactory(provided, defaultApp) {\n  if (!ɵisMessagingSupportedFactory.sync()) {\n    return null;\n  }\n\n  const defaultMessaging = ɵgetDefaultInstanceOf(MESSAGING_PROVIDER_NAME, provided, defaultApp);\n  return defaultMessaging && new Messaging(defaultMessaging);\n}\n\nfunction messagingInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!ɵisMessagingSupportedFactory.sync()) {\n      return null;\n    }\n\n    const messaging = zone.runOutsideAngular(() => fn(injector));\n    return new Messaging(messaging);\n  };\n}\n\nconst MESSAGING_INSTANCES_PROVIDER = {\n  provide: MessagingInstances,\n  deps: [[new Optional(), PROVIDED_MESSAGING_INSTANCES]]\n};\nconst DEFAULT_MESSAGING_INSTANCE_PROVIDER = {\n  provide: Messaging,\n  useFactory: defaultMessagingInstanceFactory,\n  deps: [[new Optional(), PROVIDED_MESSAGING_INSTANCES], FirebaseApp]\n};\n\nclass MessagingModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'fcm');\n  }\n\n}\n\nMessagingModule.ɵfac = function MessagingModule_Factory(t) {\n  return new (t || MessagingModule)();\n};\n\nMessagingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MessagingModule\n});\nMessagingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER, {\n    provide: APP_INITIALIZER,\n    useValue: ɵisMessagingSupportedFactory.async,\n    multi: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MessagingModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER, {\n        provide: APP_INITIALIZER,\n        useValue: ɵisMessagingSupportedFactory.async,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction provideMessaging(fn, ...deps) {\n  return {\n    ngModule: MessagingModule,\n    providers: [{\n      provide: PROVIDED_MESSAGING_INSTANCES,\n      useFactory: messagingInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n    }]\n  };\n}\n\nconst isSupported = ɵisMessagingSupportedFactory.async; // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst deleteToken = ɵzoneWrap(deleteToken$1, true);\nconst getMessaging = ɵzoneWrap(getMessaging$1, true);\nconst getToken = ɵzoneWrap(getToken$1, true);\nconst onMessage = ɵzoneWrap(onMessage$1, false);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messaging, MessagingInstances, MessagingModule, deleteToken, getMessaging, getToken, isSupported, messagingInstance$, onMessage, provideMessaging }; //# sourceMappingURL=angular-fire-messaging.js.map","map":{"version":3,"sources":["C:/Users/dctutor/Desktop/MOBILE-SEMESTRE-2/dorset-team-3-ticketing/ionic/node_modules/@angular/fire/fesm2015/angular-fire-messaging.js"],"names":["ɵgetAllInstancesOf","ɵisMessagingSupportedFactory","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵzoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","Optional","APP_INITIALIZER","NgModule","NgZone","Injector","FirebaseApp","FirebaseApps","registerVersion","deleteToken","deleteToken$1","getMessaging","getMessaging$1","getToken","getToken$1","onMessage","onMessage$1","Messaging","constructor","messaging","MESSAGING_PROVIDER_NAME","MessagingInstances","messagingInstance$","pipe","PROVIDED_MESSAGING_INSTANCES","defaultMessagingInstanceFactory","provided","defaultApp","sync","defaultMessaging","messagingInstanceFactory","fn","zone","injector","runOutsideAngular","MESSAGING_INSTANCES_PROVIDER","provide","deps","DEFAULT_MESSAGING_INSTANCE_PROVIDER","useFactory","MessagingModule","full","ɵfac","ɵmod","ɵinj","useValue","async","multi","type","args","providers","provideMessaging","ngModule","isSupported"],"mappings":"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","sourcesContent":["import { ɵgetAllInstancesOf, ɵisMessagingSupportedFactory, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { deleteToken as deleteToken$1, getMessaging as getMessaging$1, getToken as getToken$1, onMessage as onMessage$1 } from 'firebase/messaging';\nexport * from 'firebase/messaging';\n\nclass Messaging {\n    constructor(messaging) {\n        return messaging;\n    }\n}\nconst MESSAGING_PROVIDER_NAME = 'messaging';\nclass MessagingInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(MESSAGING_PROVIDER_NAME);\n    }\n}\nconst messagingInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(MESSAGING_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_MESSAGING_INSTANCES = new InjectionToken('angularfire2.messaging-instances');\nfunction defaultMessagingInstanceFactory(provided, defaultApp) {\n    if (!ɵisMessagingSupportedFactory.sync()) {\n        return null;\n    }\n    const defaultMessaging = ɵgetDefaultInstanceOf(MESSAGING_PROVIDER_NAME, provided, defaultApp);\n    return defaultMessaging && new Messaging(defaultMessaging);\n}\nfunction messagingInstanceFactory(fn) {\n    return (zone, injector) => {\n        if (!ɵisMessagingSupportedFactory.sync()) {\n            return null;\n        }\n        const messaging = zone.runOutsideAngular(() => fn(injector));\n        return new Messaging(messaging);\n    };\n}\nconst MESSAGING_INSTANCES_PROVIDER = {\n    provide: MessagingInstances,\n    deps: [\n        [new Optional(), PROVIDED_MESSAGING_INSTANCES],\n    ]\n};\nconst DEFAULT_MESSAGING_INSTANCE_PROVIDER = {\n    provide: Messaging,\n    useFactory: defaultMessagingInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_MESSAGING_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass MessagingModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'fcm');\n    }\n}\nMessagingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: MessagingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMessagingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: MessagingModule });\nMessagingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: MessagingModule, providers: [\n        DEFAULT_MESSAGING_INSTANCE_PROVIDER,\n        MESSAGING_INSTANCES_PROVIDER,\n        {\n            provide: APP_INITIALIZER,\n            useValue: ɵisMessagingSupportedFactory.async,\n            multi: true,\n        },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: MessagingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_MESSAGING_INSTANCE_PROVIDER,\n                        MESSAGING_INSTANCES_PROVIDER,\n                        {\n                            provide: APP_INITIALIZER,\n                            useValue: ɵisMessagingSupportedFactory.async,\n                            multi: true,\n                        },\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideMessaging(fn, ...deps) {\n    return {\n        ngModule: MessagingModule,\n        providers: [{\n                provide: PROVIDED_MESSAGING_INSTANCES,\n                useFactory: messagingInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    ...deps,\n                ],\n            }]\n    };\n}\n\nconst isSupported = ɵisMessagingSupportedFactory.async;\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst deleteToken = ɵzoneWrap(deleteToken$1, true);\nconst getMessaging = ɵzoneWrap(getMessaging$1, true);\nconst getToken = ɵzoneWrap(getToken$1, true);\nconst onMessage = ɵzoneWrap(onMessage$1, false);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messaging, MessagingInstances, MessagingModule, deleteToken, getMessaging, getToken, isSupported, messagingInstance$, onMessage, provideMessaging };\n//# sourceMappingURL=angular-fire-messaging.js.map\n"]},"metadata":{},"sourceType":"module"}